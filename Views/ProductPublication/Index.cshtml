@inject System.Text.Encodings.Web.JavaScriptEncoder encoder
@inject Corprio.CorprioAPIClient.APIClient corprio
@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@{
    Guid organizationID = Context.SelectedOrganizationID() ?? Guid.Empty;
    ViewData["Title"] = @localizer["PublishProduct"];
    string masterProductUrl = configuration["ProductMasterUrl"];
    string metaApiID = configuration["MetaApiSetting:AppId"];
    string metaApiVersion = configuration["MetaApiSetting:ApiVersion"];
}
<link rel="stylesheet" href="~/css/productpublication.css" />
<script async defer crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js"></script>
<div class="m-4">
    <div class="title-border-l">
        <h4>@localizer["PublishProduct"]</h4>
    </div>    
    @(
        Html.DevExtreme().DataGrid<ProductViewModel>()
        .StandardGrid()
        .ConfigDataSource(controllerName: "ProductPublication", organizationID: organizationID)
        .ElementAttr("class", "clickable-row")
        .NoDataText(localizer["noData"])
        // redirect to ProductMaster
        @* .OnRowClick($"function(e){{ window.open(`{masterProductUrl}/{organizationID}/Product/Edit/productid`.replace('productid', e.key), '_blank').focus() }}") *@
        .Columns(col =>
        {
            // reference: https://demos.devexpress.com/ASPNetCore/Demo/DataGrid/CommandColumnCustomization/            
            @* col.Add().Caption(localizer["Publish"]).Name("Publish").Type(GridCommandColumnType.Buttons).Width(52).ShowInColumnChooser(false)
            .Buttons(b => b.Add().Hint(localizer["PublishProductHint"]).Icon("upload").OnClick("PublishProduct").CssClass("publish-btn")); *@
            col.AddFor(m => m.PostIDs).DataType(GridColumnDataType.Object).Caption(localizer["Publish"]).Name("Publish").Width(52).ShowInColumnChooser(false)
            .AllowFiltering(false).AllowSorting(false).AllowExporting(false).CssClass("publish-col").CellTemplate(@<text>
            <% if (data.PostIDs.length) { %>
                @Html.DevExtreme().Button().Icon("exportselected").OnClick("function() { PublishProduct(data) }").Hint(localizer["PublishProductHint2"])
            <% } else {%>
                @Html.DevExtreme().Button().Icon("upload").OnClick("function() { PublishProduct(data) }").Hint(localizer["PublishProductHint"]).OnInitialized("function(e) { OnButtonInitialized(e, data) }")
            <% } %>
            </text>);
            // the data type needs to be explicitly set to avoid loading the data twice (i.e., error W1005)
            col.AddFor(m => m.MasterProductCode).DataType(GridColumnDataType.String).Visible(false).AllowEditing(false).CalculateSortValue("MasterProduct.Code");
            col.AddFor(m => m.Code).DataType(GridColumnDataType.String).SortOrder(SortOrder.Asc);
            col.AddFor(m => m.Name).DataType(GridColumnDataType.String).SetCellValue("setNameValue");
            col.AddFor(m => m.Description).DataType(GridColumnDataType.String).Visible(false).SetCellValue("setDescriptionValue");
            col.AddFor(m => m.GlobalizedName).DataType(GridColumnDataType.String).GlobalText().Visible(false);
            col.AddFor(m => m.GlobalizedDescription).DataType(GridColumnDataType.String).GlobalText().Visible(false);
            col.AddFor(m => m.GlobalizedLongDescription).DataType(GridColumnDataType.String).GlobalHTML().Visible(false);
            col.AddFor(m => m.DefaultBarcode).DataType(GridColumnDataType.String).Visible(false);
            col.AddFor(m => m.Nature).DataType(GridColumnDataType.Number).LookupEnum(typeof(Corprio.DataModel.Business.Products.ProductNature)).Visible(false);
            col.AddFor(m => m.ProductTypeID).DataType(GridColumnDataType.String)
            .LookupProductType(organizationID)
            .CalculateDisplayValue(nameof(ProductViewModel.ProductTypeName))
            .CalculateSortValue("ProductType.Name")
            .CellTemplate(new JS($"corprio.ui.launchAppCellTemplate('{organizationID}','ProductType','ProductTypeID')"));
            col.AddFor(m => m.BrandID).DataType(GridColumnDataType.String)
            .LookupBrand(organizationID)
            .CalculateDisplayValue(nameof(ProductViewModel.BrandName))
            .CalculateSortValue("Brand.Name")
            .CellTemplate(new JS($"corprio.ui.launchAppCellTemplate('{organizationID}','Brand','BrandID')"));
            col.AddFor(m => m.StockUOMCode).DataType(GridColumnDataType.String).Caption(localizer["UnitOfMeasure"]).Visible(false);
            col.AddFor(m => m.Model).DataType(GridColumnDataType.String);
            col.AddFor(m => m.ListPrice_CurrencyCode).DataType(GridColumnDataType.String).Caption(localizer["ListPriceCurrency"]).Visible(false);
            col.AddFor(m => m.ListPrice_Value).DataType(GridColumnDataType.Number).Caption(localizer["ListPriceValue"]).CalculateDisplayValue(new JS("displayListPrice")).CalculateSortValue("ListPrice_Value");
            col.AddFor(m => m.GrossWeight).DataType(GridColumnDataType.Number).Visible(false);
            col.AddFor(m => m.NetWeight).DataType(GridColumnDataType.Number).Visible(false);
            col.AddFor(m => m.WeightUnit).DataType(GridColumnDataType.String).Visible(false).Lookup(lookup =>
                lookup.DataSource(Corprio.Global.Measure.Lists.WeightUnitList()).DisplayExpr("Value").ValueExpr("Key").AllowClearing(true));
            col.AddFor(m => m.Length).DataType(GridColumnDataType.Number).Visible(false);
            col.AddFor(m => m.Width).DataType(GridColumnDataType.Number).Visible(false);
            col.AddFor(m => m.Height).DataType(GridColumnDataType.Number).Visible(false);
            col.AddFor(m => m.LengthUnit).DataType(GridColumnDataType.String).Visible(false).Lookup(lookup =>
                lookup.DataSource(Corprio.Global.Measure.Lists.LengthUnitList()).DisplayExpr("Value").ValueExpr("Key").AllowClearing(true));
            col.AddFor(m => m.Image01).DataType(GridColumnDataType.String).Visible(false)
            .ImageColumn(uploadUrl: Url.Action("upload", "image"), cellDisplayTemplate: "imageCellDisplay", imageSpec: localizer["ProductImageSpec"]);
            col.AddFor(m => m.Tags).DataType(GridColumnDataType.Object)
            .CalculateFilterExpression("filterTag")
            .FilterOperations(new GridFilterOperations[] { GridFilterOperations.Equal })
            .CellTemplate(new JS("TagsCellTemplate"))
            @* .EditCellTemplate(new TemplateName("TagsEditTemplate")) *@
            .AllowSorting(false);
            col.AddFor(m => m.IsMasterProduct).Visible(false).CellTemplate(new JS(@$"corprio.ui.boolColumnCellTemplate('{Corprio.DataModel.Resources.Resource.IsMasterProduct}')"));            
            col.AddFor(m => m.Disabled).DataType(GridColumnDataType.Boolean).FilterValue(false).Width(60).CellTemplate(new JS(@$"corprio.ui.boolColumnCellTemplate('{Corprio.DataModel.Resources.Resource.IsDisabled}')"));
            col.AddShortDateTimeFor(m => m.CreateDate, User.UserSettings()).DataType(GridColumnDataType.Date).Visible(false).AllowEditing(false);
            col.AddShortDateTimeFor(m => m.LastUpdateDate, User.UserSettings()).DataType(GridColumnDataType.Date).Visible(false).AllowEditing(false);
        })
        .OnCellClick("onCellClick")        
        .Toolbar(toolbar => toolbar.Items(items =>
        {
            // redirect to ProductMaster
            items.Add().Location(ToolbarItemLocation.Before).ShowText(ToolbarItemShowTextMode.Always)
            .Widget(w => w.Button().Text(globalLocalizer["Add New"]).Type(ButtonType.Default)
            .OnClick($"function(){{ window.open(`{masterProductUrl}/{organizationID}/Product/Add`, '_blank').focus() }}"));
            items.Add().Name(DataGridToolbarItem.ColumnChooserButton).Location(ToolbarItemLocation.After);
            items.Add().Name(DataGridToolbarItem.ExportButton).Location(ToolbarItemLocation.After);
        }))
    )        
    <div id="load-panel"></div>    
</div>
<vc:static-data model="@StaticDataRequestViewModel.All(true)" org-info="true" />
<script>
    let facebookId;
    const viewSettingConfig = corprio.gridViewStateConfig("product", "grd");
    const langs = StaticData.OrgInfo.SupportedLanguages;    
    function loadPanel() {
        return $('#load-panel').dxLoadPanel({
            message: '@encoder.Encode(localizer["Processing"])',
            visible: false,
            showIndicator: true,
            showPane: true,
            shading: true,
            hideOnOutsideClick: false
        }).dxLoadPanel('instance');
    }
    
    // triggered when the user elects to publish a product
    function PublishProduct(e) {
        console.log(e);        
        return $.post({
            url: "@Url.Action("PreviewProductPost", new { organizationID })",
            data: { productID: e.ID }
        }).done(function (result) {            
            if (!result) return;   // see PostTemplateSummary for the shape of this object
            let warning = "@encoder.Encode(localizer["PublishProductPrompt2"])";
            // warning = warning.replaceAll('{0}', result.Keyword);
            var prompt = DevExpress.ui.dialog.custom({
                title: "@encoder.Encode(localizer["PublishProduct"])",
                dragEnabled: false,
                messageHtml:
                    `<div class="mb-3">${warning}</div>` +
                    `<textarea id="post-message" class="form-control" rows="6" cols="40">${result}</textarea>`,
                buttons: [{
                    text: "@encoder.Encode(localizer["Confirm"])",
                    onClick: function () {
                        loadPanel().show();
                        $.ajax({
                            url: "@Url.Action("PublishProduct", new { organizationID })",
                            type: 'POST',
                            data: {
                                productID: e.ID,                                
                                message: $('#post-message').val(),
                                facebookUserID: facebookId,
                            }                            
                        }).done(function () {
                            var message = DevExpress.ui.dialog.custom({
                                title: "@encoder.Encode(localizer["PublicationCompletedTitle"])",
                                messageHtml: "<p>@encoder.Encode(localizer["ProductPublicationCompletedMessage"])</p>",
                            });
                            message.show();
                            $(`.icon-${e.ID}`).find('i').removeClass('dx-icon-upload').addClass('dx-icon-exportselected');
                        }).fail(corprio.formatError).always(() => { loadPanel().hide(); });
                    },
                    type: "default",
                }, {
                    text: "@encoder.Encode(localizer["Cancel"])",
                    onClick: function () { console.log("Cancelled") },
                    type: "normal",
                }]
            });
            prompt.show();
        }).fail(corprio.formatError);
    }

    function displayListPrice(rowData) {        
        // note: undefined == null is truthy
        if (rowData.ListPrice_Value == null || rowData.ListPrice_CurrencyCode == null) {
            return '';
        } else {
            var dp = StaticData.CurrencyDecimals[rowData.ListPrice_CurrencyCode];
            if (dp === null) dp = 2;
            var numberFormat = new Intl.NumberFormat(corprio.getLang(), { style: 'currency', currency: rowData.ListPrice_CurrencyCode });
            return numberFormat.format(rowData.ListPrice_Value);
        }
    }        
    
    function imageCellDisplay(cellElement, cellInfo) {
        if (cellInfo.value && cellInfo.value.UrlKey) cellElement.append($("<img>", { "src": '@corprio.ImageApi.UrlPrefix(organizationID, ImageSize.Thumbnail)' + cellInfo.value.UrlKey, "alt": cellInfo.data.Code }));
    }
    
    function setNameValue(newData, value, currentRowData) {
        newData.Name = value;
        if (!currentRowData.ID) newData.GlobalizedName = corprio.globalText.init(value, langs); //initialize global name for new record
    }

    function setDescriptionValue(newData, value, currentRowData) {
        newData.Description = value;
        if (!currentRowData.ID) newData.GlobalizedDescription = corprio.globalText.init(value, langs);//initialize global description for new record
    }

    //show tags
    function TagsCellTemplate(container, options) {
        var data = options.value;
        var text = "";
        $.each(data, (i, v) => {
            if (i != 0)
                text += ",";
            text += v;
        });
        container.text(text);
    }
    
    function filterTag(filterValue, selectedFilterOperation) {
        return ["EntityProperties.Any(Name==\"tag\" && Value==\"" + filterValue + "\")", "=", "true"];
    }
    
    // when a row is clicked, redirect to ProductMaster's edit page, unless it is the Publish button being clicked
    function onCellClick(e) {                
        if (e.rowType === "data" && e.column.name != "Publish") {
            window.open('@masterProductUrl/@organizationID/Product/Edit/productid'.replace('productid', e.key), '_blank').focus()
        }
    }
    
    // add a class to the publication button so that we can update its icon when needed
    function OnButtonInitialized(e, data) {
        e.element.addClass(`icon-${data.ID}`);
    }    

    // since this page may become the login landing page, it should trigger refresh access token whenever possible
    window.fbAsyncInit = function () {
        FB.init({ appId: '@metaApiID', cookie: true, xfbml: true, version: '@metaApiVersion' });        
        FB.getLoginStatus(function (response) {   // Called after the JS SDK has been initialized.                        
            if (response?.status === 'connected') {
                facebookId = response.authResponse?.userID;
                return $.ajax({
                    type: 'POST',
                    url: '/' + '@organizationID' + '/ConnectFacebook/RefreshAccessToken',
                    data: { metaId: response.authResponse?.userID, token: response.authResponse?.accessToken },
                    success: function () { console.log('Token refreshed'); },
                    error: function () { console.log('Failed to refresh.'); }
                });
            }
        });
    };

    /**
     * IIFE to make a reference to the SDK, if it does not already exist
     */
    (function (element, tagName, selector) {
        var js, fjs = element.getElementsByTagName(tagName)[0];
        if (element.getElementById(selector)) { return; }
        js = element.createElement(tagName); js.id = selector;
        js.src = "https://connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk')
    );

    $(function() {
        corprio.page.initTour({ defaultTour: 'productpublication.index', autoStart: true });        
    })

</script>
@* @using (Html.DevExtreme().NamedTemplate("TagsEditTemplate"))
{
    @(Html.DevExtreme().TagBox()
                .DataSource(d => d.ConfigController("ProductPublication", "GetDistinctProductPropertyValues", organizationID, "", new { propertyName = "tag" }))
                .DataSourceOptions(option => option.PageSize(50).Paginate(true).SearchOperation(FilterOperations.Contains))
                .Value(new JS("value"))
                .AcceptCustomValue(true)
                .HideSelectedItems(true)
                .SearchEnabled(true)
                .ApplyValueMode(EditorApplyValueMode.Instantly)
                .OnValueChanged("function(e) {setValue(e.value);}")
                .OnSelectionChanged("function(e) {component.updateDimensions}")
            )
} *@