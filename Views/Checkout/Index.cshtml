@using Corprio.SocialWorker.Models
@using Corprio.Core.Utility
@using Corprio.DataModel.Business
@using System.Globalization
@inject Corprio.AspNetCore.Site.Services.GlobalListService Options
@inject System.Text.Encodings.Web.JavaScriptEncoder encoder
@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@model CheckoutViewModel
@{
    Layout = "_PublicLayout";
    Guid organizationID = Context.SelectedOrganizationID() ?? Guid.Empty;    
    string appUrl = configuration["AppBaseUrl"];
    string paymentPortalUrl = configuration["PaymentAppUrl"];
    
    bool hasFreeShippingPolicy = Model.FreeShippingAmount.HasValue;
    decimal freeShippingAmount = hasFreeShippingPolicy ? Model.FreeShippingAmount.Value : 0;
}

<link rel="stylesheet" href="~/css/checkout.css" />
<script src="~/js/views/Checkout/Index.js" asp-append-version="true"></script>
<script>
    const vdata = {
        actions: {            
            deleteSalesOrderLine: '@StringHelper.Encode(@Url.Action("DeleteSalesOrderLine", "Checkout", new { organizationID }))',
            editSalesOrderLine: '@StringHelper.Encode(@Url.Action("EditSalesOrderLine", "Checkout", new { organizationID }))',
            finalizeSalesOrder: '@StringHelper.Encode(@Url.Action("FinalizeSalesOrder", "Checkout", new { organizationID }))',
            getProductVariations: '@StringHelper.Encode(@Url.Action("GetProductVariations", "Checkout", new { organizationID }))',
            voidAndRecall: '@StringHelper.Encode(@Url.Action("VoidAndRecall", "Checkout", new { organizationID }))',
            voidOrder: '@StringHelper.Encode(@Url.Action("VoidSalesOrder", "Checkout", new { organizationID }))',
        },
        localizer: {            
            addNewProduct: '@StringHelper.Encode(@localizer["AddNewProduct"])',
            billTo: '@StringHelper.Encode(@localizer["BillTo"])',
            cancel: '@StringHelper.Encode(@localizer["Cancel"])',
            cancelOrder: '@StringHelper.Encode(@localizer["CancelOrder"])',
            cannotEdit_PaymentProcessing: '@StringHelper.Encode(@localizer["CannotEdit_PaymentProcessing"])',
            cannotEdit_VoidedOrPaid: '@StringHelper.Encode(@localizer["CannotEdit_VoidedOrPaid"])',
            colour: '@StringHelper.Encode(@localizer["Colour"])',
            confirm: '@StringHelper.Encode(@localizer["Confirm"])',
            confirmation: '@StringHelper.Encode(@localizer["Confirmation"])',
            confirmAddProduct: '@StringHelper.Encode(@localizer["ConfirmAddProduct"])',
            confirmVoidOrder: '@StringHelper.Encode(@localizer["ConfirmVoidOrder"])',
            delete: '@StringHelper.Encode(@localizer["Delete"])',
            deliverTo: '@StringHelper.Encode(@localizer["DeliverTo"])',
            deliveryCharge: '@StringHelper.Encode(@localizer["DeliveryCharge"])',
            deliveryMethod: '@StringHelper.Encode(@localizer["DeliveryMethod"])',
            editQuantity: '@StringHelper.Encode(@localizer["EditQuantity"])',
            editVariant: '@StringHelper.Encode(@localizer["EditVariant"])',
            errMsgChatbotNotFound: '@StringHelper.Encode(@localizer["ErrMsg_ChatbotNotFound"])',
            errMsgUnselectedVariations: '@StringHelper.Encode(@localizer["ErrMsg_UnselectedVariations"])',
            familyName: '@encoder.Encode(globalLocalizer["Family Name"])',
            givenName: '@encoder.Encode(globalLocalizer["Given Name"])',
            freeShippingHint1: '@StringHelper.Encode(@localizer["FreeShippingHint1"])',
            freeShippingHint2: '@StringHelper.Encode(@localizer["FreeShippingHint2"])',
            freeShippingQualified: '@StringHelper.Encode(@localizer["FreeShippingQualified"])',
            invalidFeedback_AddressLine1: '@StringHelper.Encode(@localizer["InvalidFeedback_AddressLine1"])',
            invalidFeedback_CountryCode: '@StringHelper.Encode(@localizer["InvalidFeedback_CountryCode"])',
            invalidFeedback_FamilyName: '@StringHelper.Encode(@localizer["InvalidFeedback_FamilyName"])',
            invalidFeedback_GivenName: '@StringHelper.Encode(@localizer["InvalidFeedback_GivenName"])',
            invalidFeedback_InvalidPhoneNumber: '@StringHelper.Encode(@localizer["InvalidFeedback_InvalidPhoneNumber"])',
            noDeliveryMethod: '@StringHelper.Encode(@localizer["Advice_NoDeliveryMethod"])',
            noPickupInstruction: '@StringHelper.Encode(@localizer["Advice_NoPickupInstruction"])',
            proceedToPayment: '@StringHelper.Encode(@localizer["ProceedToPayment"])',
            processing: '@StringHelper.Encode(@localizer["Processing"])',
            quantity: '@StringHelper.Encode(@localizer["Qty"])',
            receipient: '@StringHelper.Encode(@localizer["Receipient"])',
            remainingStockMessage: '@StringHelper.Encode(@localizer["RemainingStockMessage"])',
            remainingStockTitle: '@StringHelper.Encode(@localizer["RemainingStockTitle"])',
            save: '@StringHelper.Encode(localizer["Save"])',
            selfPickup: '@StringHelper.Encode(localizer["SelfPickUp"])',
            size: '@StringHelper.Encode(@localizer["Size"])',
            shipToCustomer: '@StringHelper.Encode(localizer["ShipToCustomer"])',
            titleEditVariant: '@StringHelper.Encode(localizer["Title_EditVariant"])',
            warningDeleteProduct: '@StringHelper.Encode(localizer["Warning_DeleteProduct"])',
        },
        model: {
            allowSelfPickup: '@Model.AllowSelfPickUp',
            billedPersonFamilyName: '@Model.BillPerson.FamilyName',
            billedPersonGivenName: '@Model.BillPerson.GivenName',
            billedPhoneCountryCallingCode: '@Model.BillContactPhone.CountryCallingCode',
            billedPhoneNationalDestinationCode: '@Model.BillContactPhone.NationalDestinationCode',
            billedPhoneSubscriberNumber: '@Model.BillContactPhone.SubscriberNumber',
            chosenDeliveryMethod: '@Model.ChosenDeliveryMethod',
            currencyCode: '@Model.CurrencyCode',
            defaultCountryCode: '@Model.DefaultCountryCode',
            deliveryChargeAmount: '@Model.DeliveryCharge',
            deliveryAddress_Line1: '@Model.DeliveryAddress.Line1',
            deliveryAddress_Line2: '@Model.DeliveryAddress.Line2',
            deliveryAddress_City: '@Model.DeliveryAddress.City',
            deliveryAddress_State: '@Model.DeliveryAddress.State',
            deliveryAddress_PostalCode: '@Model.DeliveryAddress.PostalCode',
            deliveryAddress_CountryAlphaCode: '@Model.DeliveryAddress.CountryAlphaCode',
            deliveryContact_FamilyName: '@Model.DeliveryContact.FamilyName',
            deliveryContact_GivenName: '@Model.DeliveryContact.GivenName',
            deliveryPhoneCountryCallingCode: '@Model.DeliveryContactPhone.CountryCallingCode',
            deliveryPhoneNationalDestinationCode: '@Model.DeliveryContactPhone.NationalDestinationCode',
            deliveryPhoneSubscriberNumber: '@Model.DeliveryContactPhone.SubscriberNumber',
            freeShippingAmount: '@freeShippingAmount',
            hasFreeShipping: '@hasFreeShippingPolicy',
            isOrderVoidOrPaid: '@Model.IsOrderVoidOrPaid',
            isPaymentClicked: '@Model.IsPaymentClicked',
            isPreview: '@Model.IsPreview',
            orderLineJsonString: '@Model.OrderLineJsonString',
            organizationID: '@Model.OrganizationID',
            organizationEmailAddress: '@Model.OrganizationEmailAddress',
            organizationShortName: '@Model.OrganizationShortName',
            provideShipping: '@Model.ProvideDelivery',
            salesOrderID: '@Model.SalesOrderID',
            selfPickUpInstruction: '@Model.SelfPickUpInstruction'
        },
        settings: {            
            appUrl: '@appUrl',                                    
            paymentPortalUrl: '@paymentPortalUrl',            
        },
    };
</script>
<div class="m-4">
    <div class="checkout-container">
        <div class="title-border-l">
            <h3>@localizer["Checkout"]</h3>
        </div>

        <div>
            <div id="reminderPopup"></div>

            <section class="row mb-4">
                <div class="col order-ref">
                    <div class="input-group mb-3 mr-2">
                        <label class="my-1 mr-2" for="document-date">@localizer["OrderDate"]</label>
                        <input type="text" id="document-date" class="text-right" value="@Model.OrderDate.ToString("d", new CultureInfo("zh-HK"))" disabled />
                    </div>
                </div>

                <div class="col order-ref">
                    <div class="input-group mb-3 mr-2">
                        <label class="my-1 mr-2" for="document-number">@localizer["DocumentNum"]</label>
                        <input type="text" id="document-number" class="text-right" value="@Model.DocumentNum" disabled />
                    </div>
                </div>
            </section>

            <section class="table-responsive">
                <div class="d-flex justify-content-between mb-2">
                    <h5 class="">@localizer["ShoppingCart"]</h5>
                    @if (!Model.IsPaymentClicked && !Model.IsOrderVoidOrPaid)
                    {
                        <div><button class="btn btn-info add-prd-btn"><i class="fas fa-plus mr-1"></i>@localizer["AddNewProduct"]</button></div>
                    }
                </div>
                <table class="table lined-border">
                    <thead>
                        <tr>
                            <th scope="col">@localizer["Product"]</th>
                            <th scope="col" class="dx-text-content-alignment-left d-flex">
                                <div class="flex-even">@localizer["ProductName"]</div>
                                <div class="flex-even">@localizer["ProductDesc"]</div>
                            </th>
                            <th scope="col">@localizer["Price"]</th>
                            <th scope="col" class="dx-text-content-alignment-left d-flex">
                                <div class="flex-even">@localizer["Qty"]</div>
                                <div class="flex-even">@localizer["UnitOfMeasure"]</div>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="cart-items"></tbody>
                </table>
            </section>

            <section class="mr-2 mb-3">
                <div class="mb-2">
                    <div class="d-flex justify-content-between">
                        <div>@localizer["Subtotal"]</div>
                        <div id="order-subtotal"></div>
                    </div>
                </div>

                @if (!Model.IsPaymentClicked)
                {
                    <div id="delivery-charge-div" class="mb-2">
                        <div class="d-flex justify-content-between">
                            <div>@localizer["DeliveryCharge"]</div>
                            <div id="delivery-charge-amt"></div>
                        </div>
                    </div>
                }

                <div class="border-top mb-2 pt-2">
                    <div class="d-flex justify-content-between">
                        <b>@localizer["TotalAmount"]</b>
                        <b id="order-total"></b>
                    </div>
                </div>
            </section>

            <div class="user-message">@Html.Raw(Model.Footer)</div>

            <div id="load-panel"></div>
            <div id="edit-popup"></div>
            <form id="customer-info-form" autocomplete="on"></form>
        </div>
    </div>    
</div>
<vc:static-data model="@StaticDataRequestViewModel.All(true)" org-info="true" />